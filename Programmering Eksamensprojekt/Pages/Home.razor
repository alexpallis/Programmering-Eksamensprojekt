@page "/"
@using System.Text.Json
@using System.IO
@using Microsoft.AspNetCore.Components
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<p>@pString</p>
<p>@p1String</p>
<p>@p2String</p>
<p>@p3String</p>
<p>@p4String</p>
<p>@p5String</p>
<p>@p6String</p>
<p>@p7String</p>
<p>@p8String</p>
<p>@p9String</p>
<p>@p10String</p>
@code {
    string pString = "";
    string p1String = "";
    string p2String = "";
    string p3String = "";
    string p4String = "";
    string p5String = "";
    string p6String = "";
    string p7String = "";
    string p8String = "";
    string p9String = "";
    string p10String = "";
    List<List<string>> unitGroups = new List<List<string>>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var json = await Http.GetStringAsync("unitGroups.json");
            var parsedData = JsonSerializer.Deserialize<Dictionary<string, object>>(json);
            if (parsedData != null && parsedData.ContainsKey("Formler"))
            {
                var formulasJson = parsedData["Formler"].ToString();
                var formulas = JsonSerializer.Deserialize<Dictionary<string, List<int>>>(formulasJson);
                if (formulas != null)
                {
                    unitGroups = formulas.Values.Select(list => list.Select(i => i.ToString()).ToList()).ToList();
                }
            }
            pString = "JSON virker hype.";
        }

       catch (JsonException jex)
        {
            pString = $"JSON virker ikke (mindre hype): {jex.Message}";
        }
        catch (Exception ex)
        {
            pString = $"Error loading JSON: {ex.Message}";
        }

        bool Succes = false;
        var Output = "5";
        var Input = new List<string> { "2", "3","4" };
        HashSet<string> HSInput = new HashSet<string>(Input);
        HashSet<string> requiredUnits = new HashSet<string> { Output };
        requiredUnits.UnionWith(Input);
        var matchingGroups = unitGroups
            .Where(group => new HashSet<string>(group).IsSubsetOf(requiredUnits) && new HashSet<string>(group).Contains(Output))
            .ToList();

        if (matchingGroups.Count > 0)
        {
            foreach (var group in matchingGroups)
            {
                p3String = $"{string.Join(", ", group)}";
            }
        }
        else
        {
            List<List<string>> AlreadyFound = new List<List<string>>();
            List<List<string>> FinalEquations = new List<List<string>>();
            Succes = Search(Output, HSInput, AlreadyFound, FinalEquations);
            FinalEquations.AddRange(AlreadyFound);
            List<string> mergedFinalEquations = FinalEquations.Select(sublist => string.Join(",", sublist)).ToList();
            List<string> UniqueFinalEquations = mergedFinalEquations.Distinct().ToList();
            p8String = $"{string.Join("; ", UniqueFinalEquations)}";
            p10String = Succes ? "Succes" : "Fail";
        }
    }

    private bool Search(string Output, HashSet<string> HSInput, List<List<string>> AlreadyFound, List<List<string>> FinalEquations)
    {
        List<List<string>> groupsWithOutput = unitGroups
        .Where(group => new HashSet<string>(group).Contains(Output))
        .Except(AlreadyFound)
        .ToList();
        unitGroups.Except(AlreadyFound);
        if (groupsWithOutput.Count == 0) return false;

        List<List<string>> matchingGroups2 = new List<List<string>>();
        List<List<string>> matchingGroups3 = new List<List<string>>();

        for (int i = 0; i < groupsWithOutput.Count; i++)
        {
            HashSet<string> HSMissingVariables = new HashSet<string>(groupsWithOutput[i]);
            HSMissingVariables.Remove(Output);
            HSMissingVariables.UnionWith(HSInput);
            HSMissingVariables.ExceptWith(HSInput);

            for (int j = 0; j < unitGroups.Count; j++)
            {
                if (!groupsWithOutput[i].SequenceEqual(unitGroups[j]))
                {
                    HashSet<string> HSunitGroups = new HashSet<string>(unitGroups[j]);
                    if (HSunitGroups.IsSupersetOf(HSMissingVariables) && HSMissingVariables.Count == 1)
                    {
                        HSunitGroups.ExceptWith(HSMissingVariables);
                        if (HSInput.IsSupersetOf(HSunitGroups))
                        {
                            matchingGroups2.Add(unitGroups[j]);
                            matchingGroups2.Add(groupsWithOutput[i]);
                        }
                    }
                    else if (HSunitGroups.Overlaps(HSMissingVariables) && HSunitGroups.Count(HSMissingVariables.Contains) == 1)
                    {
                        HSunitGroups.ExceptWith(HSMissingVariables);
                        if (HSInput.IsSupersetOf(HSunitGroups))
                        {
                            matchingGroups3.Add(unitGroups[j]);
                        }
                    }
                }
            }
            HashSet<string> mergedMatchingGroups3 = matchingGroups3.SelectMany(set => set).ToHashSet();
            if (mergedMatchingGroups3.IsSupersetOf(HSMissingVariables))
            {
                matchingGroups3.Add(groupsWithOutput[i]);
            }
            else
            {
                matchingGroups3.Clear();
            }
        }
        if (matchingGroups2.Count > 0)
        {
            foreach (var group in matchingGroups2)
            {
                FinalEquations.Add(group);
            }
            return true;
        }
        else if (matchingGroups3.Count > 0)
        {
            foreach (var group in matchingGroups3)
            {
                FinalEquations.Add(group);
            }
            return true;
        }
        else
        {
            for (int i = 0; i < groupsWithOutput.Count; i++)
            {
                bool allVariablesFound = true;
                HashSet<string> HSMissingVariables = new HashSet<string>(groupsWithOutput[i]);
                HSMissingVariables.Remove(Output);
                HSMissingVariables.UnionWith(HSInput);
                HSMissingVariables.ExceptWith(HSInput);
                AlreadyFound.Add(groupsWithOutput[i]);
                foreach (string variable in HSMissingVariables)
                {
                    if (!Search(variable, HSInput, AlreadyFound, FinalEquations))
                    {
                        allVariablesFound = false;
                        AlreadyFound.Clear();
                        FinalEquations.Clear();
                        break;
                    }
                }
                if (allVariablesFound) return true;
            }
            return false;
        }

    }
}