@page "/"
@using System.Text.Json
@using System.IO
@using Microsoft.AspNetCore.Components
@using Programmering_Eksamensprojekt.Services
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<script type="text/javascript" async src="MathJax-master/MathJax-master/es5/tex-mml-chtml.js"></script>
<script src="Rerender.js"></script>

@inject MathJaxRenderer mathJaxRenderer;

<h1>Skriv hvad du vil finde bro</h1>
<p>Skriv dit output her:</p>
<input id="outputField" type="text" @bind="Output" @oninput="UpdateSuggestions" list="suggestionsList" />
<datalist id="suggestionsList">
    @foreach (var suggestion in Suggestions)
    {
        <option value="@suggestion"></option>
    }
</datalist>

<p>Vælg dine størrelser en ad gangen:</p>
<input id="inputField" type="text" @bind-value="CurrentInput" @oninput="UpdateInputSuggestions" list="inputSuggestionsList" />
<datalist id="inputSuggestionsList">
    @foreach (var suggestion in InputSuggestions)
    {
        <option value="@suggestion"></option>
    }
</datalist>
<button @onclick="AddSize">Tilføj Størrelse</button>

<ul>
    @foreach (var size in SelectedSizes)
    {
        <li>@size <button @onclick="() => RemoveSize(size)">X</button></li>
    }
</ul>

<button id="buttonSearch" @onclick="onSearchButtonClicked">Search</button>

<p>@pString</p>
<p>@p1String</p>
<p>@p2String</p>
<p>@p3String</p>
<p>@p4String</p>
<p>@p5String</p>
<p>@p6String</p>
<p>@p7String</p>
<div @key="@EquationsWithLineBreak">
    @EquationsWithLineBreak
</div>
<p>@p9String</p>
<p>@p10String</p>

@code {
    // Variables for dynamic content
    string pString = "";
    string p1String = "";
    string p2String = "";
    string p3String = "";
    string p4String = "";
    string p5String = "";
    string p6String = "";
    string p7String = "";
    string p8String = "";
    string p9String = "";
    string p10String = "";
    MarkupString EquationsWithLineBreak = new();

    // Data structures for calculations and UI interactions
    List<List<string>> unitGroups = new();
    List<string> Suggestions = new();
    List<string> InputSuggestions = new();
    Dictionary<string, string> nameToNumber = new();
    Dictionary<string, List<string>> numberToName = new();

    // User inputs
    private string Output;
    private string CurrentInput;
    private List<string> SelectedSizes = new();

    // Initialize component and fetch data
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var json = await Http.GetStringAsync($"unitGroups.json?t={DateTime.UtcNow.Ticks}");
            var parsedData = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

            if (parsedData != null && parsedData.ContainsKey("Størrelse"))
            {
                var sizeJsonElement = (JsonElement)parsedData["Størrelse"];
                var sizeDict = JsonSerializer.Deserialize<Dictionary<string, int>>(sizeJsonElement.GetRawText());
                Console.WriteLine("1");

                if (sizeDict != null)
                {
                    nameToNumber = sizeDict.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.ToString());
                }
            }
            Console.WriteLine($"ParsedData Keys: {string.Join(", ", parsedData.Keys)}");
            if (parsedData != null && parsedData.ContainsKey("Formler"))
            {
                var groupsJsonElement = (JsonElement)parsedData["Formler"];
                var rawUnitGroups = JsonSerializer.Deserialize < Dictionary<string, List<int>>> (groupsJsonElement.GetRawText());
                Console.WriteLine("2");
                unitGroups = rawUnitGroups.Values
                     .Select(group => group
                         .Select(item => item.ToString())
                         .ToList())
                     .ToList();
                if (rawUnitGroups != null)
                {
                    foreach (var kvp in rawUnitGroups)
                    {
                        string formula = kvp.Key;
                        List<string> numbers = new();
                        foreach (int number in kvp.Value) 
                        {
                            numbers.Add(number.ToString());
                        }
                        string key = string.Join(",", numbers);

                        if (!numberToName.ContainsKey(key))
                        {
                            numberToName[key] = new List<string>(); 
                        }

                        numberToName[key].Add(formula);
                    }

                }

            }
        }
        catch (Exception ex)
        {
            pString = $"Error loading JSON: {ex.Message}";
        }
    }


    // Update dropdown suggestions for output field
    private void UpdateSuggestions(ChangeEventArgs e)
    {
        var inputText = e.Value?.ToString() ?? "";
        Suggestions = nameToNumber.Keys
            .Where(name => name.Contains(inputText, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();
    }

    // Update dropdown suggestions for input field
    private void UpdateInputSuggestions(ChangeEventArgs e)
    {
        var inputText = e.Value?.ToString() ?? "";
        InputSuggestions = nameToNumber.Keys
            .Where(name => name.Contains(inputText, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();
        InvokeAsync(StateHasChanged);
    }

    // Add selected size to list
    private void AddSize()
    {
        if (!string.IsNullOrWhiteSpace(CurrentInput) && !SelectedSizes.Contains(CurrentInput))
        {
            SelectedSizes.Add(CurrentInput);
            CurrentInput = ""; // Clear input field
        }
    }

    // Remove a size from the list
    private void RemoveSize(string size)
    {
        SelectedSizes.Remove(size);
    }

    // Search button logic
    private async Task onSearchButtonClicked()
    {

        string outputNumber = nameToNumber.TryGetValue(Output, out string tempOutput) ? tempOutput : Output;
        List<string> inputNumbers = SelectedSizes
            .Select(i => nameToNumber.TryGetValue(i, out string num) ? num : i)
            .ToList();


        bool Succes = false;
        HashSet<string> HSInput = new(inputNumbers);
        HashSet<string> requiredUnits = new() { outputNumber };
        requiredUnits.UnionWith(inputNumbers);

        List<List<string>> AlreadyFound = new();
        List<List<string>> FinalEquations = new();
        Succes = Search(outputNumber, HSInput, AlreadyFound, FinalEquations, requiredUnits);

        foreach (var kvp in numberToName)
        {
            Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}" + "AHHHHHH");
        }
        p10String = Succes ? "Succes" : "Fail";
        foreach (var eq in FinalEquations)
        {
            Console.WriteLine("Equation: " + string.Join(", ", eq));
        }
        List<string> FinalEquationsName = new();
        foreach (var List in FinalEquations)
        {
            string key = string.Join(",", List);
            List<String> Formler = numberToName[key];
            FinalEquationsName.AddRange(Formler);
        }
        p8String = string.Join("<br><br>", FinalEquationsName.Distinct().ToList().Select(eq => "\\(" + $"{eq}" + "\\)").ToList());
        EquationsWithLineBreak = (MarkupString)p8String;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
        await CallMathJax();
    }

    private async Task CallMathJax()
    {
        try{
        if (mathJaxRenderer != null) { await mathJaxRenderer.RenderMath(); }
        }
        catch (JSException ex)
        {
            Console.Error.WriteLine($"JavaScript error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private bool Search(string Output, HashSet<string> HSInput, List<List<string>> AlreadyFound, List<List<string>> FinalEquations, HashSet<string> requiredUnits)
    {
        p2String = $"Searching for: {Output}, Given Inputs: {string.Join(", ", HSInput)}";
        List<List<string>> matchingFormulas = unitGroups
            .Where(kvp => new HashSet<string>(kvp).IsSubsetOf(requiredUnits) && kvp.Contains(Output))
            .ToList();

        if (matchingFormulas.Count > 0)
        {
            foreach (var List in matchingFormulas)
            {
                FinalEquations.Add(List);
            }
            p10String = "Success";
            return true;
        }

        List<List<string>> groupsWithOutput = unitGroups
            .Where(group => new HashSet<string>(group).Contains(Output))
            .Except(AlreadyFound)
            .ToList();
        unitGroups = unitGroups.Where(group => group.Count > 1).ToList();

        if (groupsWithOutput.Count == 0)
        {
            p10String = "Fail: Ingen formler fundet.";
            return false;
        }

        List<List<string>> matchingGroups2 = new List<List<string>>();
        List<List<string>> matchingGroups3 = new List<List<string>>();

        for (int i = 0; i < groupsWithOutput.Count; i++)
        {
            HashSet<string> HSMissingVariables = new HashSet<string>(groupsWithOutput[i]);
            HSMissingVariables.Remove(Output);
            HSMissingVariables.UnionWith(HSInput);
            HSMissingVariables.ExceptWith(HSInput);

            for (int j = 0; j < unitGroups.Count; j++)
            {
                if (!groupsWithOutput[i].SequenceEqual(unitGroups[j]))
                {
                    HashSet<string> HSunitGroups = new HashSet<string>(unitGroups[j]);
                    if (HSunitGroups.IsSupersetOf(HSMissingVariables) && HSMissingVariables.Count == 1)
                    {
                        HSunitGroups.ExceptWith(HSMissingVariables);
                        if (HSInput.IsSupersetOf(HSunitGroups))
                        {
                            matchingGroups2.Add(unitGroups[j]);
                            matchingGroups2.Add(groupsWithOutput[i]);
                        }
                    }
                    else if (HSunitGroups.Overlaps(HSMissingVariables) && HSunitGroups.Count(HSMissingVariables.Contains) == 1)
                    {
                        HSunitGroups.ExceptWith(HSMissingVariables);
                        if (HSInput.IsSupersetOf(HSunitGroups))
                        {
                            matchingGroups3.Add(unitGroups[j]);
                        }
                    }
                }
            }
            HashSet<string> mergedMatchingGroups3 = matchingGroups3.SelectMany(set => set).ToHashSet();
            if (mergedMatchingGroups3.IsSupersetOf(HSMissingVariables))
            {
                matchingGroups3.Add(groupsWithOutput[i]);
            }
            else
            {
                matchingGroups3.Clear();
            }
        }

        if (matchingGroups2.Count > 0)
        {
            foreach (var group in matchingGroups2)
            {
                FinalEquations.Add(group);
            }
            p10String = "Success";
            return true;
        }
        else if (matchingGroups3.Count > 0)
        {
            foreach (var group in matchingGroups3)
            {
                FinalEquations.Add(group);
            }
            p10String = "Success";
            return true;
        }
        else
        {
            for (int i = 0; i < groupsWithOutput.Count; i++)
            {
                bool allVariablesFound = true;
                HashSet<string> HSMissingVariables = new HashSet<string>(groupsWithOutput[i]);
                HSMissingVariables.Remove(Output);
                HSMissingVariables.UnionWith(HSInput);
                HSMissingVariables.ExceptWith(HSInput);
                AlreadyFound.Add(groupsWithOutput[i]);
                //AlreadyFound.AddRange(unitGroups.Where(group => group.Count == 1).ToList());

                foreach (string variable in HSMissingVariables)
                {
                    if (!Search(variable, HSInput, AlreadyFound, FinalEquations, requiredUnits))
                    {
                        allVariablesFound = false;
                        AlreadyFound.Remove(groupsWithOutput[i]);
                        break;
                    }
                }
                if (allVariablesFound)
                {
                    FinalEquations.Add(groupsWithOutput[i]);
                    p10String = "Success";
                    return true;
                }
            }
            p10String = "Fail: Ingen formler fundet grundet inputs or some sh*t";
            return false;
        }
    }

}
